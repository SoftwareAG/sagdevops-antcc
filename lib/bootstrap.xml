<?xml version="1.0" encoding="UTF-8" ?>
<project name="bootstrap" default="help-bootstrap" basedir=".">
	<description>
      	Command Central bootstrap installer wrapper
	</description>

	<!-- IMPORTANT: rev this version anytime we promote new installer -->
	<property name="cc.installer.latest" value="cc-def-10.4-latest" />


	<property environment="env" />

	<target name="help-bootstrap">
		<echo>
Environment variables:

CC_INSTALLER_URL=url             Command Central disibution site
CC_INSTALLER=name                Command Central installer name
CC_BOOT=other                    Command Central configuration name
CC_PASSWORD=password             Command Central Administrator password

Optional parameter for any target:	

-Dbootstrap=other                Bootstrap local Command Central server using
                                 CC_BOOT env var configuration file
                                 or default 'bootstrap/default.properties'
                                 or custom 'bootstrap/other.properties'
Targets:

ant boot                         Bootstrap local Command Central server (CCE)
ant client                       Bootstrap local Command Central client (CLI)
ant agent                        Bootstrap local Command Central agent  (SPM)
ant installers                   Download bootstrap installers
ant upgrade                      Upgrade local Command Central server
ant startcc                      Start local Command Central server
ant stopcc                       Stop local Command Central server
		</echo>
	</target>

	<condition property="is.unix" value="true">
		<os family="unix" />
	</condition>

	<condition property="is.windows" value="true">
		<os family="windows" />
	</condition>

	<condition property="is.mac" value="true">
		<os family="mac" />
	</condition>
	
	<condition property="is.notWin" value="true">
		<not>
		    <os family="windows" />
		</not>
	</condition>
	

	<target name="_prepare" depends="_check-os-distribution">
		<echo>platform: ${platform}</echo>
<!--
		<condition property="unzip.file" value="true">
			<os family="windows" />
		</condition>
		<condition property="file.extension" value="zip" else="sh">
			<os family="windows" />
		</condition>
		<condition property="report.file.extension" value="bat" else="sh">
			<os family="windows" />
		</condition>		

		<condition property="file.extension" value="sh">
		  <or>
		    <os family="unix" />
		    <os family="mac" />
		  </or>
		</condition>
		<condition property="report.file.extension" value="sh">
		  <or>
		    <os family="unix" />
		    <os family="mac" />
		  </or>
		</condition>
-->
		<condition property="bootstrap" value="${env.CC_BOOT}" else="default">
			<isset property="env.CC_BOOT"/>
		</condition>
	
		<property name="bootstrap.properties" value="bootstrap/${bootstrap}.properties" />

		<upper string="${platform}" to="platform.uppercase" />
		
		<property file="${bootstrap.properties}" />

		<!-- one of the env.properties properties -->
		<property name="os.platform" value="${platform}" />

		<condition property="license.agreement.switch" value="--accept-license" else="" >
			<equals arg1="${accept.license}" arg2="true" casesensitive="false" trim="true"/>
		</condition>
		
		<!-- default is latest public GA version on SDC-->
		<condition property="installer" value="${env.CC_INSTALLER}" else="${cc.installer.latest}-${platform}">
			<isset property="env.CC_INSTALLER"/>
		</condition>
<!-- to remove
		<property name="installer.file" value="${installer}.${file.extension}" />
-->
		<!-- default download location -->
		<property name="installer.dir" location="${user.home}/Downloads" />

		<!-- default public download site on SDC-->
		<condition property="installer.url" value="${env.CC_INSTALLER_URL}" else="http://empowersdc.softwareag.com/ccinstallers">
			<isset property="env.CC_INSTALLER_URL"/>
		</condition>

	    <!-- default installation directory in Dev -->
		<property name="install.dir" location="${user.home}/sag/cc" />

		<condition property="install.dir.exists">
			<available file="${install.dir}" />
		</condition>

		<!-- default ports -->
		<property name="port.range" value="80" />
		<property name="cce.http.port" value="${port.range}90" />
		<property name="cce.https.port" value="${port.range}91" />
		<property name="spm.http.port" value="${port.range}92" />
		<property name="spm.https.port" value="${port.range}93" />

		<!-- default Administrator password -->
		<condition property="password" value="${env.CC_PASSWORD}" else="manage">
			<isset property="env.CC_PASSWORD"/>
		</condition>		

		<property name="distro" value="CCE" />
		<property name="cc.host" value="${node.host}" />
	</target>

	<target name="_install" depends="_prepare,_download,_check-installer,_unzip-installer">
		<echo>
			Installing ${distro} using ${installer} from ${installer.dir} ...
			Running ${installer}.${report.file.extension} ${license.agreement.switch} -d ${install.dir} -c ${cce.http.port} -C ${cce.https.port} -s ${spm.http.port} -S ${spm.https.port} -p ${password} -H ${cc.host}
		</echo>

		<exec dir="${installer.dir}" executable="/bin/bash" osfamily="unix" vmlauncher="false" failonerror="true" >
			<arg line="./${installer}.sh ${license.agreement.switch} -D ${distro} -d ${install.dir} -c ${cce.http.port} -C ${cce.https.port} -s ${spm.http.port} -S ${spm.https.port} -p ${password} -H ${cc.host}" />
		</exec>
		<condition property="installer.win" value="${installer.bat.filename}" else="${installer}.exe" >
		    <isset property="installer.bat.filename"/>
		</condition>
		<pathconvert  targetos="windows" property="install.dir.win" >
		    <path>
		      <pathelement location="${install.dir}" />
		    </path>
		</pathconvert>
		<exec dir="${installer.dir}" executable="${installer.win}" osfamily="windows" vmlauncher="false" failonerror="true" >
			<arg line="${license.agreement.switch}" />
			<arg value="-D" />
			<arg value="${distro}" />
			<arg value="-d" />
			<!-- IMPORTANT: convert path to Windows format -->
			<arg path="${install.dir.win}" />
			<arg value="-c" />
			<arg value="${cce.http.port}" />
			<arg value="-C" />
			<arg value="${cce.https.port}" />
			<arg value="-s" />
			<arg value="${spm.http.port}" />
			<arg value="-S" />
			<arg value="${spm.https.port}" />
			<arg value="-p" />
			<arg value="${password}" />
			<arg value="-H" />
			<arg value="${cc.host}" />
		</exec>
		
		<property name="cc.cli.home" value="${install.dir}/CommandCentral/client" />

		<!-- remember CLI location for Windows clients that can't pick up CC_CLI_HOME env var right away -->
		<mkdir dir="${user.home}/.sag" />
		<propertyfile file="${user.home}/.sag/cc.properties">
			<entry key="cc.cli.home" value="${cc.cli.home}" />
		</propertyfile>
	</target>

	<target name="stopcc" depends="_prepare" description="Stop local Command Central Server" if="install.dir.exists" >
   	    <exec dir="${install.dir}" executable="/bin/bash" osfamily="unix" vmlauncher="false" failifexecutionfails="false" >
			<arg line="./profiles/SPM/bin/shutdown.sh" />
		</exec>
		<exec dir="${install.dir}" executable="/bin/bash" osfamily="unix" vmlauncher="false" failifexecutionfails="false" >
			<arg line="./profiles/CCE/bin/shutdown.sh" />
		</exec>

		<exec dir="${install.dir}" executable="profiles/SPM/bin/shutdown.bat" osfamily="windows" vmlauncher="false" failifexecutionfails="false" />
        <exec dir="${install.dir}" executable="profiles/CCE/bin/shutdown.bat" osfamily="windows" vmlauncher="false" failifexecutionfails="false"  />

		<sleep seconds="15" />
	</target>

	<target name="startcc" depends="_prepare" description="Start local Command Central Server" if="install.dir.exists">
		<exec dir="${install.dir}" executable="/bin/bash" osfamily="unix" vmlauncher="false" >
			<arg line="./profiles/SPM/bin/startup.sh" />
		</exec>
		<exec dir="${install.dir}" executable="/bin/bash" osfamily="unix" vmlauncher="false" >
			<arg line="./profiles/CCE/bin/startup.sh" />
		</exec>

		<exec dir="${install.dir}" executable="profiles/SPM/bin/startup.bat" osfamily="windows" vmlauncher="false" />
        <exec dir="${install.dir}" executable="profiles/CCE/bin/startup.bat" osfamily="windows" vmlauncher="false" />
	</target>
	
	<target name="uninstall" depends="stopcc" description="Uninstall bootstrapped installation" if="install.dir.exists" >
		<delete dir="${install.dir}" />
	</target>

	<target name="boot" description="Bootstrap local Command Central">
		<antcall target="_install" />		
	</target>

	<target name="boot-repo-based" depends="_prepare,_download,_check-installer,_unzip-installer" description="Bootstrap local Command Central using the repo-based bootstrap installer. For internal use only!">
		<fail unless="bootstrap.remote.repo">
			ERROR: You must specify value for bootstrap.remote.repo if you are using the repo-based bootstrap installer!
		</fail>	
		<echo>
			Installing ${distro} using ${installer} from ${installer.dir} ...
			Running ${installer}.${report.file.extension} ${license.agreement.switch} -d ${install.dir} -c ${cce.http.port} -C ${cce.https.port} -s ${spm.http.port} -S ${spm.https.port} -p ${password} -H ${cc.host} --internal-remote-repo ${bootstrap.remote.repo}
		</echo>

		<exec dir="${installer.dir}" executable="/bin/bash" osfamily="unix" vmlauncher="false" failonerror="true" >
			<arg line="./${installer}.sh ${license.agreement.switch} -D ${distro} -d ${install.dir} -c ${cce.http.port} -C ${cce.https.port} -s ${spm.http.port} -S ${spm.https.port} -p ${password} -H ${cc.host} --internal-remote-repo ${bootstrap.remote.repo}" />
		</exec>
		<condition property="installer.win" value="${installer.bat.filename}" else="${installer}.exe" >
		    <isset property="installer.bat.filename"/>
		</condition>
		<pathconvert  targetos="windows" property="install.dir.win" >
		    <path>
		      <pathelement location="${install.dir}" />
		    </path>
		</pathconvert>
		<exec dir="${installer.dir}" executable="${installer.win}" osfamily="windows" vmlauncher="false" failonerror="true" >
			<arg line="${license.agreement.switch}" />
			<arg value="-D" />
			<arg value="${distro}" />
			<arg value="-d" />
			<!-- IMPORTANT: convert path to Windows format -->
			<arg path="${install.dir.win}" />
			<arg value="-c" />
			<arg value="${cce.http.port}" />
			<arg value="-C" />
			<arg value="${cce.https.port}" />
			<arg value="-s" />
			<arg value="${spm.http.port}" />
			<arg value="-S" />
			<arg value="${spm.https.port}" />
			<arg value="-p" />
			<arg value="${password}" />
			<arg value="-H" />
			<arg value="${cc.host}" />
			<arg value="--internal-remote-repo" />
			<arg value="${bootstrap.remote.repo}" />
		</exec>
		
		<property name="cc.cli.home" value="${install.dir}/CommandCentral/client" />

		<!-- remember CLI location for Windows clients that can't pick up CC_CLI_HOME env var right away -->
		<mkdir dir="${user.home}/.sag" />
		<propertyfile file="${user.home}/.sag/cc.properties">
			<entry key="cc.cli.home" value="${cc.cli.home}" />
		</propertyfile>
	</target>	
	
	<target name="boot-migration-default" description="Upgrade local Command Central" depends="_prepare,_download,_check-installer,_unzip-installer">
		<pathconvert  targetos="windows" property="install.dir.win" >
		    <path>
		      <pathelement location="${install.dir}" />
		    </path>
		</pathconvert>
		<pathconvert  targetos="windows" property="install.dir.win.old" >
		    <path>
		      <pathelement location="${install.dir.old}" />
		    </path>
		</pathconvert>		
		<echo>Running: ${installer}.${file.extension} -d ${install.dir} -p ${password} -m ${install.dir.old}</echo>

		<exec dir="${installer.dir}" executable="/bin/bash" osfamily="unix" vmlauncher="false" failonerror="true" >
			<arg line="./${installer}.sh --accept-license -D ${distro} -d ${install.dir} -p ${password} -m ${install.dir.old}" />
		</exec>
		
		<condition property="installer.win" value="${installer.bat.filename}" else="${installer}.exe" >
		    <isset property="installer.bat.filename"/>
		</condition>
		<exec dir="${installer.dir}" executable="${installer.win}" osfamily="windows" vmlauncher="false" failonerror="true" >
			<arg value="--accept-license" />
			<arg value="-D" />
			<arg value="${distro}" />
			<arg value="-d" />
			<!-- IMPORTANT: convert path to Windows format -->
			<arg path="${install.dir.win}" />
			<arg value="-p" />
			<arg value="${password}" />
			<arg value="-m" />
			<arg value="${install.dir.win.old}" />
		</exec>
    </target>


	<target name="register-installer" description="Register installer in Command Central" depends="_prepare,_download,_check-installer">
			 <echo>register installer ${installer}.${file.extension} in CCE installers </echo>
		     <copy file="${installer.dir}/${installer}.${file.extension}" todir="${install.dir}/profiles/CCE/data/installers"/>
	</target>
	
	<target name="backup" description="Backup local Command Central" depends="_prepare,stopcc" if="install.dir.exists">
		<move todir="${install.dir}.bak" overwrite="true" preservelastmodified="true" >
			<fileset dir="${install.dir}" includes="**"/>
		</move>
	</target>
	
	<target name="upgrade" description="Upgrade local Command Central" depends="backup" if="install.dir.exists">
		<antcall target="_install" >
			<param name="extra.args" value="-m ${install.dir}.bak" />
		</antcall>
	</target>
	
	<target name="client" description="Bootstrap local CC CLI tool">
		<antcall target="_install">
			<param name="distro">CLI</param>
		</antcall>
	</target>

	<target name="agent" description="Bootstrap local SPM agent">
		<antcall target="_install">
			<param name="distro">SPM</param>
		</antcall>
	</target>

	<target name="_download" depends="_prepare,_downloadSh,_downloadExe,_downloadZip" if="installer.url">
			<echo>Finished downloading bootstrap installer from ${installer.url}/${installer}.${file.extension} ...</echo>
	</target>
	
	<target name="_downloadSh" if="is.notWin">
	  <property name="file.extension" value="sh" />
	  <property name="report.file.extension" value="sh" />
	  <mkdir dir="${installer.dir}" />
	  <get src="${installer.url}/${installer}.sh" dest="${installer.dir}" usetimestamp="true" />
	  <property name="skipWin" value="true" />
	</target>

	<target name="_downloadExe" unless="skipWin">
      <mkdir dir="${installer.dir}" />
	  <get src="${installer.url}/${installer}.exe" dest="${installer.dir}" usetimestamp="true" ignoreerrors="true"/>
	  <available file="${installer.dir}/${installer}.exe" property="skipZip" />
	  <condition property="file.extension" value="exe">
	    <isset property="skipZip"/>
	  </condition>
	  <condition property="report.file.extension" value="exe">
	    <isset property="skipZip"/>
	  </condition>
	  <condition property="downloadZip" value="true">
		<and>
	  	  <not>
	  	  	<isset property="skipZip" />
		  </not>
		  <isset property="is.windows" />
		</and>
	  </condition>
	</target>

	<target name="_downloadZip" if="downloadZip">
	  <property name="file.extension" value="zip" />
	  <property name="report.file.extension" value="bat" />
	  <property name="unzip.file" value="true" />
	  <get src="${installer.url}/${installer}.zip" dest="${installer.dir}" usetimestamp="true" />
	</target>

	<target name="_check-installer" depends="_prepare">
		<fail>
			Bootstrap installer is not found: ${installer.dir}/${installer}.${file.extension}
			Download this file from https://empower.softwareag.com/Products/DownloadProducts/sdc/default.asp
			and place this file at the above location.
			<condition>
				<not>
					<available file="${installer.dir}/${installer}.${file.extension}"/>
				</not>
			</condition>
		</fail>
	</target>
	
	<target name="_unzip-installer" if="unzip.file">
		<echo>Unzipping file ${installer.dir}\${installer}.${file.extension} into ${installer.dir} ... </echo>
		<unzip src="${installer.dir}/${installer}.${file.extension}" dest="${installer.dir}" />

		<fileset id="win.installers.fileset" dir="${installer.dir}" includes="**/*">
			<filename name="cc-*-w64.bat" />
		</fileset>

		<property name="installer.bat.filename" refid="win.installers.fileset" />
	</target>

	<target name="_check-os-distribution" >
		<condition property="platform" value="w64">
			<os family="windows" />
		</condition>
		<condition property="platform" value="osx">
			<os family="mac" />
		</condition>

		<exec executable="/bin/sh" outputproperty="output.uname" osfamily="unix">
			<arg value="-c" />
			<arg value="uname" />
		</exec>
		<exec executable="/bin/sh" outputproperty="output.distribution" osfamily="unix">
			<arg value="-c" />
			<arg value="uname -m" />
		</exec>

		<condition property="platform" value="lnxamd64">
			<equals arg1="${output.uname}" arg2="Linux" />
		</condition>

		<condition property="platform" value="aix">
			<equals arg1="${output.uname}" arg2="AIX" />
		</condition>

		<condition property="platform" value="hp11it">
			<equals arg1="${output.uname}" arg2="HP-UX" />
		</condition>

		<!--i86pc is for solamd64; SPARC is for sol -->
		<condition property="platform" value="solamd64" else="sol">
			<equals arg1="${output.distribution}" arg2="i86pc" />
		</condition>

		<exec executable="/bin/sh" outputproperty="node.host" osfamily="unix">
			<arg value="-c" />
			<arg value="hostname" />
		</exec>
		<property name="node.host" value="${env.COMPUTERNAME}" />

		<echo>
			Platform: ${platform}
			Hostname: ${node.host}
			Username: ${user.name}
		</echo>
	</target>

	<!-- To upper case -->
	<scriptdef language="javascript" name="upper">
		<attribute name="string" />
		<attribute name="to" />
	    project.setProperty(attributes.get("to"),attributes.get("string").toUpperCase());
	</scriptdef>
	
</project>
