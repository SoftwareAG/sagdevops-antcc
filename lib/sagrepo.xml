<project name="sagrepo" default="help-sagrepo" xmlns="antlib:org.apache.tools.ant" xmlns:if="ant:if" xmlns:unless="ant:unless" basedir="." >
	<description>
        Repository management
    </description>

	<import file="sagenv.xml" />

	<target name="help-sagrepo">
		<echo>
Optional parameter for any target:

-Denv=other                      Environment configuration to use from
                                 project defaults in 'environments/default/env.properties'
                                 or custom 'environments/other/env.properties'
Targets:

ant mirrors                      Create and update mirrors
ant licenses                     Import licence key archive
ant installers                   Import bootstrap installers
ant images                       Import product and fix images
		</echo>
	</target>

	<target name="images" depends="waitcc,sagenvInit" description="Upload product and fix images">
		<property file="${env.properties}" />
		<property name="images.dir" value="images" />

		<cc command="list repository products includeHeaders=false" format="csv" outputproperty="productrepos" />
		<cc command="list repository fixes includeHeaders=false" format="csv" outputproperty="fixrepos" />
		<property name="aliases" value="${productrepos},${fixrepos}" />
		
		<antcall target="iterateImageRepos">
			<param name="type" value="products"/>
		</antcall>
		
		<antcall target="iterateImageRepos">
			<param name="type" value="fixes"/>
		</antcall>
		
		<echo>
			Registered product repositories
		</echo>
		<cc command="list repository products" format="tsv"/>
		
		<echo>
			Registered fix repositories
		</echo>
		<cc command="list repository fixes" format="tsv"/>
	</target>	

	<target name="mirrors" depends="_prepare,waitcc,sagenvInit" description="Create and update mirror repositories">
		<property file="${env.properties}" />
		
		<property name="release" value="10.1" />
		<property name="mirror.products" value="ALL" />
		<property name="mirror.platforms" value="${platform.uppercase}" />
		<property name="mirror.repo.product" value="webMethods-${release}" />
		<property name="mirror.repo.fix" value="Empower" />
		<property name="mirror.repo.product.name" value="products-${release}" />
		<property name="mirror.repo.fix.name" value="fixes-${release}" />		
		<!-- <property name="mirror.spm" value="http://localhost:8092" /> -->

		<mirror type="products" release="${release}"
			name="${mirror.repo.product.name}"
			from="${mirror.repo.product}" filter="" 
			artifacts="${mirror.products}" 
			platforms="${mirror.platforms}"/>

		<mirror type="fixes" release="${release}" 
			name="${mirror.repo.fix.name}"
			from="${mirror.repo.fix}" 
			filter="${mirror.repo.product.name}"
			platforms="${mirror.platforms}"
			artifacts="LATEST" />

		<echo>
			Registered product repositories
		</echo>
		<cc if:set="mirror.spm" command="update repository products products-${release} location=${mirror.spm}/products-${release}/repository" format="tsv"/>
		<cc command="list repository products" format="tsv"/>
		
		<echo>
			Registered fix repositories
		</echo>
		<cc if:set="mirror.spm" command="update repository fixes fixes-${release} location=${mirror.spm}/fix-fixes-${release}/repository" format="tsv"/>
		<cc command="list repository fixes" format="tsv"/>
	</target>

	<target name="licenses" depends="waitcc,sagenvInit" description="Import licence key archive">
		<property file="${env.properties}" />
		<property name="licenses.zip.file" location="${build.dir}/downloads/licenses.zip" />
		<mkdir dir="${build.dir}/downloads" />

		<echo if:set="licenses.zip.url">Downloading license keys .zip from: ${licenses.zip.url}</echo>
		<condition property="get.license.no.token" value="true">
		   <and>
			<not>
		    	  <isset property="licenses.token"/> 
			</not>
			<isset property="licenses.zip.url"/> 
	           </and>
		</condition>

		<condition property="get.license.token" value="true">
		  <and>
		    	<isset property="licenses.token"/> 
			<isset property="licenses.zip.url"/> 
                  </and>
		</condition>
                <echo if:set="get.license.token">Downloading license keys using token!</echo>
		<get if:set="get.license.token" src="${licenses.zip.url}" dest="${licenses.zip.file}" usetimestamp="true">
  			<header name="Authorization" value="token ${licenses.token}"/>
  			<header name="Accept" value="application/vnd.github.v3.raw"/>
                </get>

		<get if:set="get.license.no.token" src="${licenses.zip.url}" dest="${licenses.zip.file}" usetimestamp="true" />

		<cc command="add license-tools keys" input="${licenses.zip.file}" failonerror="false" />

		<echo>Registered license keys</echo>
		<cc command="list license-tools keys" format="tsv"/>
	</target>


	<target name="installers" depends="_prepare,sagenvInit" description="Download bootstrap installers">
		<property name="installers.dir" value="${install.dir}/profiles/CCE/data/installers" />
		<mkdir dir="${installers.dir}" />

		<property file="${env.properties}" />
		
		<!-- default value: comma delimited list of all installers to download -->
		<property name="installers" value="${installer}" />

		<echo>
			Downloading requested installers: ${installers} ...
		</echo>

		<for list="${installers}" param="i" delimiter=",">
			<sequential>
				<antcall target="_download">
					<param name="installer" value="@{i}" />
					<param name="installer.dir" value="${installers.dir}" />
				</antcall>
			</sequential>
        </for>

		<echo>
			Registered bootstrap installers
		</echo>
		<cc command="list provisioning bootstrap installers" format="tsv"/>
	</target>	
        <target name="administrator_credentials" depends="waitcc,sagenvInit2" description="Configure credentials" >
		<!-- load the from propertes file -->
		<property file="${env.properties}" />

		<propertyfile file="${env.properties}">
			<entry key="credentials.key" value="ADMINISTRATOR" />
			<entry key="credentials.username" value="Administrator" />
			<entry key="credentials.password" value="${admin.password}" />
		</propertyfile>

		<echo>
			Securely store Empower credentials in Command Central ...
		</echo>

		<antcall target="apply">
			<param name="alias" value="sag-cc-creds" />
		</antcall>

		<echo>
			List of configured credentials
		</echo>
		<cc command="list configuration instances nodeAlias=local runtimeComponentId=OSGI-CCE-ENGINE configurationTypeId=COMMON-CREDENTIALS refresh=true properties=id" format="tsv" />

	</target>
	<target name="credentials" depends="waitcc,sagenvInit2" description="Configure credentials" >
		<!-- env vars have presedence over env.properties -->
		<property name="empower.username" value="${env.EMPOWER_USR}" if:set="env.EMPOWER_USR" />
		<property name="empower.password" value="${env.EMPOWER_PSW}" if:set="env.EMPOWER_PSW"/>

		<property name="cc.password"      value="${env.CC_PASSWORD}" if:set="env.CC_PASSWORD"/>

		<!-- load the from propertes file -->
		<property file="${env.properties}" />

		<!-- if stil don't have credentials, ask for them -->
		<echo unless:set="empower.password">
			Provide https://empower.softwareag.com/ Download Center credentials:
		</echo>

		<input message="Enter your https://empower.softwareag.com/ username (email address): " 
			addproperty="empower.username" unless:set="empower.username" />

		<input message="Enter your https://empower.softwareag.com/ password (will NOT be masked!): " 
			addproperty="empower.password" unless:set="empower.password"/>

		<propertyfile file="${env.properties}">
			<entry key="empower.username" value="${empower.username}" />
			<entry key="empower.password" value="${empower.password}" />
			<entry key="cc.password" value="${cc.password}" if:set="cc.password" />
			<entry key="credentials.key" value="EMPOWER" />
			<entry key="credentials.username" value="${empower.username}" />
			<entry key="credentials.password" value="${empower.password}" />
		</propertyfile>

		<echo>
			Securely store Empower credentials in Command Central ...
		</echo>

		<antcall target="apply">
			<param name="alias" value="sag-cc-creds" />
		</antcall>

		<echo>
			List of configured credentials
		</echo>
		<cc command="list configuration instances nodeAlias=local runtimeComponentId=OSGI-CCE-ENGINE configurationTypeId=COMMON-CREDENTIALS refresh=true properties=id" format="tsv" />

	</target>

	<target name="masters" depends="waitcc,sagenvInit2" description="Register master repositories">
		<antcall target="apply">
			<param name="alias" value="sag-cc-repos" />
		</antcall>

		<echo>
			Registered product repositories
		</echo>
		<cc command="list repository products" format="tsv"/>
		
		<echo>
			Registered fix repositories
		</echo>
		<cc command="list repository fixes" format="tsv"/>
		
	</target>

	<target name="mirrors2" depends="waitcc,sagenvInit2" description="Connect remote mirrors">
		<antcall target="apply">
			<param name="alias" value="sag-cc-mirrors" />
		</antcall>

		<echo>
			Registered product repositories
		</echo>
		<cc command="list repository products" format="tsv"/>
		
		<echo>
			Registered fix repositories
		</echo>
		<cc command="list repository fixes" format="tsv"/>
		
	</target>

	<macrodef name="mirror" >
		<attribute name="type" default="products"/>
		<attribute name="release" default="10.7"/>
		<attribute name="name" default="@{type}-@{release}"/>
		<attribute name="from" default="webMethods-@{release}"/>
		<attribute name="filter" default="webMethods-@{release}"/>
		<attribute name="platforms" default="${platform.uppercase}"/>
		<attribute name="artifacts" default="ALL"/>
		<attribute name="wait" default="36000" />
		<attribute name="noProductFilter" default="false" />

		<sequential>
			<!-- get list of all repositories -->
			<cc command="list repository @{type} includeHeaders=false properties=displayName" format="csv" outputproperty="names" />
		
			<echo>Current @{type} repository names</echo>
			<echo>${names}</echo>

			<!-- check if we already have this repository -->
			<condition property="exists">
				<contains string="${names}" substring="@{name}"/>
			</condition>

			<if>
				<isfalse value="@{noProductFilter}" />
				<then>
					<echo>Filtering per products repo </echo>
					<!-- if we don't, add it-->
					<cc unless:true="${exists}" command="add repository @{type} mirror name=@{name} sourceRepos=@{from} productRepos=@{filter} artifacts=@{artifacts} platforms=@{platforms} includeHeaders=false properties=id" format="csv" outputproperty="jobid" />
				</then>
				<else>
					<!-- if we don't, add it-->
					<echo>Filtering only per fix artifacts </echo>
					<cc unless:true="${exists}" command="add repository @{type} mirror name=@{name} sourceRepos=@{from} artifacts=@{artifacts} platforms=@{platforms} includeHeaders=false properties=id" format="csv" outputproperty="jobid" />
				</else>
			</if>
						
			<!-- if we do, update it -->
			<echo if:true="${exists}">@{name} repository already exists. Updating ...</echo>
			<cc if:true="${exists}"     
				command="update repository @{type} mirror @{name} sourceRepos=@{from} productRepos=@{filter} artifacts=@{artifacts} platforms=@{platforms} includeHeaders=false properties=id" format="csv" outputproperty="jobid"/>
			
			<waitforjob wait="@{wait}" />
		</sequential>
	</macrodef>

	<macrodef name="waitforjob" >
		<attribute name="jobid" default="${jobid}"/>
		<attribute name="wait" default="120" />
		<sequential>
			<cc command="list jobmanager jobs @{jobid} includeHeaders=false" 
				expectedvalues="DONE|ERROR|WARNING|TIMEOUT|CANCELED" 
				wait="@{wait}" 
				checkevery="20" 
				format="tsv" />
			<antcall target="_jobresult"/>	
		</sequential>
	</macrodef>
	
	<target name="iterateImageRepos">
	  <property name="type" value="${type}"/>
	  <for param="file">
		<path>
		  <fileset dir="${images.dir}/${type}" includes="*.zip"/>
		</path>
		<sequential>
		  <local name="filename" />
		  <basename property="filename" file="@{file}" suffix=".zip"/>
		  <echo message="${filename}"/>
		  <antcall target="_upload-image-files">
			<param name="filename" value="${filename}"/>
			<param name="file" value="${filename}.zip"/>
			<param name="dirname" value="${type}"/>
			<param name="dir" value="${basedir}/${images.dir}/${type}"/>
		  </antcall>
		</sequential>
	  </for>
	</target>	
	
	<target name="_upload-image-files">
		<property name="alias" value="${filename}"/>
		<!-- check if we already have this repo -->
		<condition property="exists">
			<contains string="${names}" substring="@{name}"/>
		</condition>
		
		<echo if:true="${exists}">${alias}: already present!</echo>

		<sequential unless:true="${exists}">
            <echo>${alias}: uploading from ${dir}/${file}</echo>			
			<cc command="add repository ${dirname} image name=${alias} includeHeaders=false properties=id" input="${dir}/${file}" format="csv" outputproperty="jobid"/>
			<waitforjob />
 	    </sequential>
	</target>
	
</project>
