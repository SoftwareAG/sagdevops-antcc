<project name="sagabe" xmlns:au="antlib:org.apache.ant.antunit" xmlns:if="ant:if" xmlns:unless="ant:unless" basedir="." default="help-sagabe">
	<description>
        Asset Build Environment support
    </description>

	<import file="sagcc.xml" />

	<target name="help-sagabe">
		<echo>
Targets:

ant build                        Build project assets
ant push                         Push asset repo to Command Central 10.x

		</echo>
	</target>

	<target name="sagabeInit" depends="sagccInit">

		<!-- find build.properties in the order of priority -->
		<condition property="build.properties" value="build.properties">
			<available file="build.properties"/>
		</condition>
		<condition property="build.properties.exists" >
			<available file="${build.properties}"/>
		</condition>
		
		<echo>Build configuration: ${build.properties}</echo>

        <property file="${cc.properties}"/>
        <property file="${build.properties}"/>

        <property name="install.dir" location="${cc.cli.home}/../.." />
        <property name="sag.install.dir" location="${install.dir}" />
        <property name="build.source.dir" location="${basedir}/assets" />
        <property name="build.output.dir" location="${basedir}/build/assets" />
		<property name="build.number" location="1.0.0" />
		<property name="repo.asset" value="${ant.project.name}" />

        <fail>
            <condition>
                <not>
                    <available file="${install.dir}/common/AssetBuildEnvironment/master_build" />
                </not>
            </condition>
            ERROR: AssetBuildEnvironment not found in ${install.dir}.
			Use Command Central bootstrap installer to install client tools (with -D CLI)
        </fail>
	</target>

	<target name="build" depends="sagabeInit" description="Build project assets">
		<ant dir="${install.dir}/common/AssetBuildEnvironment/master_build" inheritall="true">
		</ant>
	</target>

    <target name="pushcc" depends="sagabeInit" description="Push flatfile asset repo to Command Central" >
        <mkdir dir="build/dist" />
        <zip destfile="build/dist/${repo.asset}.zip" basedir="${build.output.dir}" />
		<cc command="add repository assets flatfile name=${repo.asset} overwrite=true" input="build/dist/${repo.asset}.zip" format="tsv" />	
        <cc command="list repository assets content ${repo.asset}" format="tsv" />				
	</target>

    <target name="pushgit" depends="sagabeInit" description="Push asset repo to Git, register in CC" >
		<condition property="git.cloned" value="true" >
			<available file="build/repo/.git/" />
		</condition>

		<mkdir dir="build/repo" />

		<exec dir="build/repo" executable="git" vmlauncher="false" unless:true="${git.cloned}">
			<arg line="clone ${repo.asset.git.push.url} ." />
		</exec>

		<exec dir="build/repo" executable="git" vmlauncher="false" if:true="${git.cloned}">
			<arg line="pull" />
		</exec>

		<copy todir="build/repo" verbose="true" overwrite="true">
			<fileset dir="build/assets" includes="**" excludes="_*" />
		</copy>

		<exec dir="build/repo" executable="git" vmlauncher="false" >
			<arg line="commit -am '${ant.project.name} build ${build.number}'" />
		</exec>

		<exec dir="build/repo" executable="git" vmlauncher="false" >
			<arg line="push" />
		</exec>
	</target>

	<target name="assets" depends="sagabeInit,waitcc" >
		<cc command="add repository assets git name=${repo.asset.git} location=${repo.asset.git.pull.url} credentials=${repo.asset.git.pull.credentials} overwrite=true" format="tsv" />	
        <cc command="list repository assets content ${repo.asset.git}" format="tsv" />
	</target>

</project>
